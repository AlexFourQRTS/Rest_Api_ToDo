import React, { useState } from "react";
import { BrowserRouter, Routes, Route, Link, useLocation } from "react-router-dom";
import PrivateRoute from "./components/PrivateRoute";
import { routes } from "./routes";
import "./style.css";

import Home from "./pages/Home";
import AuthPage from "./pages/AuthPage";
import RegisterPage from "./pages/RegisterPage";
import UserPage from "./pages/User/UserPage";
import AdminPage from "./pages/Admin/AdminPage";
import FooterPage from "./pages/Footer/Footer";

function App() {
  const [token, setToken] = useState(localStorage.getItem("token"));
  const [role, setRole] = useState(localStorage.getItem("role"));
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);

  const updateAuth = (newToken, newRole) => {
    setToken(newToken);
    setRole(newRole);
    localStorage.setItem("token", newToken);
    localStorage.setItem("role", newRole);
  };

  const handleLogout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("role");
    setToken(null);
    setRole(null);
  };

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  return (
    <>
      <div>
        <BrowserRouter className="app-layout">

          <div className="app-layout-wrap-row sidebar-links">
            <div className="sidebar-toggle-text " onClick={toggleSidebar}>
              {isSidebarOpen ? '' : '‚ò∞'}
            </div>
            <SidebarLink to={routes.files} label="üìÅ" closeSidebar={() => setIsSidebarOpen(false)} />
            <SidebarLink to={routes.videos} label="üé¨" closeSidebar={() => setIsSidebarOpen(false)} />
            <SidebarLink to={routes.music} label="üéµ" closeSidebar={() => setIsSidebarOpen(false)} />
            <SidebarLink to={routes.news} label="üì∞" closeSidebar={() => setIsSidebarOpen(false)} />

            {/* <SidebarLink to={routes.files} label="üìÅ –§–∞–π–ª—ã" closeSidebar={() => setIsSidebarOpen(false)} />
            <SidebarLink to={routes.videos} label="üé¨ –í–∏–¥–µ–æ" closeSidebar={() => setIsSidebarOpen(false)} />
            <SidebarLink to={routes.music} label="üéµ –ú—É–∑—ã–∫–∞" closeSidebar={() => setIsSidebarOpen(false)} />
            <SidebarLink to={routes.news} label="üì∞ –ù–æ–≤–æ—Å—Ç–∏" closeSidebar={() => setIsSidebarOpen(false)} /> */}
          </div>

          <div className="app-layout-wrap-row">
            <aside className={`sidebar ${isSidebarOpen ? 'open' : 'closed'}`}>


              <div className="sidebar-header">
                <Link to={routes.home} className="sidebar-brand">
                üêº Panda
                </Link>
              </div>

              <nav className="sidebar-nav">
                <ul className="nav-links">
                  <SidebarLink to={routes.home} label="üè† –ì–ª–∞–≤–Ω–∞—è" closeSidebar={() => setIsSidebarOpen(false)} />
                  {token ? (
                    <>

                      {role === "admin" && (
                        <SidebarLink to={routes.admin} label="üõ†Ô∏è –ê–¥–º–∏–Ω" closeSidebar={() => setIsSidebarOpen(false)} />
                        
                      )}

                      {role === "user" && (
                        <SidebarLink to={routes.user} label="üôã‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" closeSidebar={() => setIsSidebarOpen(false)} />
                      )}
                      <li className="nav-item">
                        <button className="logout-button" onClick={handleLogout}>
                          üö™ –í—ã–π—Ç–∏
                        </button>
                      </li>
                    </>
                  ) : (
                    <>
                      <SidebarLink to={routes.login} label="üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" closeSidebar={() => setIsSidebarOpen(false)} />
                      <SidebarLink to={routes.register} label="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" closeSidebar={() => setIsSidebarOpen(false)} />
                    </>
                  )}

                  <SidebarLink to={routes.chat} label="üí¨ –ß–∞—Ç" closeSidebar={() => setIsSidebarOpen(false)} />
                  <SidebarLink to={routes.profile} label="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" closeSidebar={() => setIsSidebarOpen(false)} />
                  <SidebarLink to={routes.settings} label="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" closeSidebar={() => setIsSidebarOpen(false)} />
                  <SidebarLink to={routes.notifications} label="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" closeSidebar={() => setIsSidebarOpen(false)} />
                  <SidebarLink to={routes.help} label="‚ùì –ü–æ–º–æ—â—å" closeSidebar={() => setIsSidebarOpen(false)} />
                  <SidebarLink to={routes.blog} label="üìù –ë–ª–æ–≥" closeSidebar={() => setIsSidebarOpen(false)} />

                  <SidebarLink to={routes.friends} label="üë• –î—Ä—É–∑—å—è" closeSidebar={() => setIsSidebarOpen(false)} />
                  <SidebarLink to={routes.messages} label="‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è" closeSidebar={() => setIsSidebarOpen(false)} />

                </ul>
              </nav>
            </aside>



            <div className={`content ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>

              <div className="content-wrapper">
                <Routes>
                  <Route path={routes.login} element={<AuthPage onLogin={updateAuth} />} />
                  <Route path={routes.register} element={<RegisterPage />} />
                  <Route path={routes.home} element={<Home />} />

                  <Route element={<PrivateRoute allowedRoles={['user']} />}>
                    <Route path={routes.user} element={<UserPage />} />
                  </Route>

                  <Route element={<PrivateRoute allowedRoles={['admin']} />}>
                    <Route path={routes.admin} element={<AdminPage />} />
                  </Route>
                </Routes>
              </div>

            </div>
          </div>

          <FooterPage />



        </BrowserRouter>
      </div>
    </>
  );
}

const SidebarLink = ({ to, label, closeSidebar }) => {
  const location = useLocation();
  const isActive = location.pathname === to;

  return (
    <li className="nav-item">
      <Link
        to={to}
        className={`nav-link ${isActive ? 'active' : ''}`}
        onClick={closeSidebar}
      >
        {label}
      </Link>
    </li>
  );
};

export default App;