import React from 'react';
import './Home.css'; 

const Home = () => {
  return (
    <div className="welcome-page">
      <div className="welcome-content">
        <h1>Техническое задание: Разработка REST API для управления списком задач (To-Do List)</h1>
        <h2>1. Введение</h2>
        <p>Необходимо разработать REST API для управления списком задач. API должно позволять пользователям создавать, редактировать, просматривать и удалять задачи.</p>
        <h2>2. Технологический стек</h2>
        <p>Разработчик может выбрать один из следующих стеков технологий:</p>
        <ul>
          <li>Backend: Node.js (Express) или PHP (чистый или с использованием Laravel)</li>
          <li>База данных: JSON-файл, SQLite, MySQL или MongoDB</li>
        </ul>
        <h2>3. Функционал API</h2>
        <p>Методы API:</p>
        <ul>
          <li>POST /tasks – Создать новую задачу</li>
          <li>GET /tasks – Получить список всех задач</li>
          <li>GET /tasks/&#123;id&#125; – Получить конкретную задачу</li>
          <li>PUT /tasks/&#123;id&#125; – Обновить задачу</li>
          <li>DELETE /tasks/&#123;id&#125; – Удалить задачу</li>
        </ul>
        <p>Входные параметры (JSON):</p>
        <ul>
          <li>title (string) – Заголовок задачи (обязательный)</li>
          <li>description (string) – Описание задачи (необязательный)</li>
          <li>status (string) – Статус задачи (pending, in progress, completed)</li>
        </ul>
        <p>Выходные данные: Объект созданной задачи с id</p>
        <h2>4. Frontend</h2>
        <p>Простое отображение списка задач с возможностью добавления, редактирования и удаления.</p>
        <p>Можно использовать любой фреймворк (React, Vue, Angular) или чистый HTML + JavaScript.</p>
        <p>Минимальное количество CSS, оформление не критично.</p>
        <h2>5. Дополнительные требования</h2>
        <p>Структурированный код: Разделить логику на файлы (контроллеры, маршруты, сервисы, модели).</p>
        <p>Аутентификация (необязательно, если сложно): Реализовать JWT-аутентификацию (по желанию), чтобы пользователи могли получать и изменять только свои задачи. Если JWT сложен, можно обойтись без аутентификации.</p>
        <p>Роли пользователей (дополнительно, если возможно): Администратор – Полный доступ ко всем задачам. Обычный пользователь – Доступ только к своим задачам.</p>
        <h2>6. Требования к коду</h2>
        <p>Чистота и читаемость кода. Обработчики ошибок. Минимальная документация (README с инструкцией по запуску).</p>
      </div>
    </div>
  );
};

export default Home;