import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Volume2, VolumeX, Play, Square, Triangle, Zap, RotateCcw, Settings } from "lucide-react";
import styles from "./ToneGenerator.module.css";
import Hero from "../../../components/UI/Hero/Hero";
import useToneGenerator from "../../../hooks/useToneGenerator";

const ToneGenerator = () => {
  const {
    isPlaying,
    frequency,
    amplitude,
    waveform,
    error,
    isContinuous,
    isLooping,
    lowFreq,
    midFreq,
    highFreq,
    activeBand,
    cycleCount,
    maxCycles,
    bassPresets,
    waveforms,
    frequencyBands,
    playTone,
    stopTone,
    playBassPreset,
    stopLooping,
    setExactFrequency,
    changeFrequency,
    changeBandFrequency,
    changeAmplitude,
    changeWaveform,
    toggleContinuous,
    clearError
  } = useToneGenerator();

  const [currentPreset, setCurrentPreset] = useState(null);
  const [showCustomInput, setShowCustomInput] = useState(false);
  const [tempCustomFreq, setTempCustomFreq] = useState('');
  const [showCustomBassInput, setShowCustomBassInput] = useState(false);
  const [customBassFreq, setCustomBassFreq] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–µ—Å–µ—Ç–æ–≤
  const [openCategories, setOpenCategories] = useState({
    'ultra-low': false,
    'very-low': false,
    'low': false,
    'mid-low': false,
    'mid': false,
    'mid-high': false,
    'high': false,
    'very-high': false,
    'custom': false
  });

  const sectionVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  };

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (error) {
      const timer = setTimeout(clearError, 5000);
      return () => clearTimeout(timer);
    }
  }, [error, clearError]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  const handlePlayStop = () => {
    if (isPlaying) {
      stopTone();
      stopLooping();
    } else {
      playTone(frequency, amplitude, waveform, isContinuous);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã —á–µ—Ä–µ–∑ —Å–ª–∞–π–¥–µ—Ä
  const handleFrequencyChange = (e) => {
    const newFreq = parseInt(e.target.value);
    changeFrequency(newFreq);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤ –ø–æ–ª–æ—Å–µ
  const handleBandFrequencyChange = (band, e) => {
    changeBandFrequency(band, e.target.value);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–º–ø–ª–∏—Ç—É–¥—ã
  const handleAmplitudeChange = (e) => {
    const newAmp = parseFloat(e.target.value);
    changeAmplitude(newAmp);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
  const handleContinuousToggle = (e) => {
    toggleContinuous(e.target.checked);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –±–∞—Å–æ–≤—É—é –∫–Ω–æ–ø–∫—É
  const handleBassPreset = (preset) => {
    if (preset.isCustom) {
      setShowCustomBassInput(true);
      return;
    }
    setCurrentPreset(preset);
    playBassPreset(preset, false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è –±–∞—Å–∞
  const handleBassLoop = (preset) => {
    if (preset.isCustom) {
      setShowCustomBassInput(true);
      return;
    }
    setCurrentPreset(preset);
    playBassPreset(preset, true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π –±–∞—Å–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç—ã
  const handleCustomBassSubmit = (e) => {
    e.preventDefault();
    const freq = parseFloat(customBassFreq);
    if (!isNaN(freq) && freq >= 1 && freq <= 21000) {
      const customPreset = {
        name: `${freq} –ì—Ü`,
        frequency: freq,
        description: '–ö–∞—Å—Ç–æ–º–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞',
        isCustom: true
      };
      setCurrentPreset(customPreset);
      playBassPreset(customPreset, false);
      setShowCustomBassInput(false);
      setCustomBassFreq('');
    } else {
      clearError(); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
      setTimeout(() => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ clearError (—ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
        console.error('–ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 21000 –ì—Ü');
      }, 100);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
  const handleStopLooping = () => {
    stopLooping();
    setCurrentPreset(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã
  const handleCustomFrequencySubmit = (e) => {
    e.preventDefault();
    setExactFrequency(tempCustomFreq);
    setShowCustomInput(false);
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatFrequency = (freq) => {
    if (freq >= 1000) {
      return `${(freq / 1000).toFixed(1)} –∫–ì—Ü`;
    }
    return `${freq} –ì—Ü`;
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const toggleCategory = (category) => {
    setOpenCategories(prev => ({
      ...prev,
      [category]: !prev[category]
    }));
  };

  return (
    <div className={styles.toneGenerator}>
      <motion.section
        className={styles.intro}
        variants={sectionVariants}
        initial="hidden"
        animate="visible"
      >
        <Hero 
          title="–¢–æ–Ω-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä" 
          subtitle="–°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–æ–≤—ã—Ö –≤–æ–ª–Ω —Ä–∞–∑–ª–∏—á–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã –∏ —Ñ–æ—Ä–º—ã" 
        />
      </motion.section>

      <motion.section
        className={styles.content}
        variants={sectionVariants}
        initial="hidden"
        animate="visible"
      >
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className={styles.mainControls}>
          {/* –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
          <div className={styles.playSection}>
            <button
              onClick={handlePlayStop}
              className={`${styles.playButton} ${isPlaying ? styles.playing : ''}`}
              disabled={!!error}
            >
              {isPlaying ? <VolumeX size={32} /> : <Play size={32} />}
            </button>
            <div className={styles.playInfo}>
              <span className={styles.frequencyDisplay}>
                {formatFrequency(frequency)}
              </span>
              <span className={styles.waveformDisplay}>
                {waveforms.find(w => w.value === waveform)?.label}
              </span>
              <span className={styles.bandDisplay}>
                {frequencyBands[activeBand]?.label}
              </span>
              {isLooping && (
                <span className={styles.loopingIndicator}>
                  üîÑ –ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ ({cycleCount}/{maxCycles})
                </span>
              )}
            </div>
          </div>

          {/* –†–µ–∂–∏–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
          <div className={styles.modeToggle}>
            <label className={styles.toggleLabel}>
              <input
                type="checkbox"
                checked={isContinuous}
                onChange={handleContinuousToggle}
                className={styles.toggleInput}
              />
              <span className={styles.toggleSlider}></span>
              –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            </label>
          </div>
        </div>

        {/* –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
        <div className={styles.settingsPanel}>
          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç–æ–π - —Ç—Ä–∏ –ø–æ–ª–æ—Å—ã */}
          <div className={styles.controlGroup}>
            <label className={styles.controlLabel}>
              –ß–∞—Å—Ç–æ—Ç–∞: {formatFrequency(frequency)}
            </label>
            
            {/* –¢—Ä–∏ –ø–æ–ª–æ—Å—ã —á–∞—Å—Ç–æ—Ç */}
            <div className={styles.frequencyBands}>
              {/* –ù–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã */}
              <div className={`${styles.frequencyBand} ${activeBand === 'low' ? styles.active : ''}`}>
                <div className={styles.bandHeader}>
                  <span className={styles.bandLabel} style={{ color: frequencyBands.low.color }}>
                    {frequencyBands.low.label}
                  </span>
                  <span className={styles.bandFreq}>
                    {formatFrequency(lowFreq)}
                  </span>
                </div>
                <input
                  type="range"
                  min={frequencyBands.low.min}
                  max={frequencyBands.low.max}
                  value={lowFreq}
                  onChange={(e) => handleBandFrequencyChange('low', e)}
                  className={`${styles.frequencySlider} ${styles.lowSlider}`}
                  style={{ '--slider-color': frequencyBands.low.color }}
                />
                <div className={styles.rangeLabels}>
                  <span>{frequencyBands.low.min} –ì—Ü</span>
                  <span>{frequencyBands.low.max} –ì—Ü</span>
                </div>
              </div>

              {/* –°—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã */}
              <div className={`${styles.frequencyBand} ${activeBand === 'mid' ? styles.active : ''}`}>
                <div className={styles.bandHeader}>
                  <span className={styles.bandLabel} style={{ color: frequencyBands.mid.color }}>
                    {frequencyBands.mid.label}
                  </span>
                  <span className={styles.bandFreq}>
                    {formatFrequency(midFreq)}
                  </span>
                </div>
                <input
                  type="range"
                  min={frequencyBands.mid.min}
                  max={frequencyBands.mid.max}
                  value={midFreq}
                  onChange={(e) => handleBandFrequencyChange('mid', e)}
                  className={`${styles.frequencySlider} ${styles.midSlider}`}
                  style={{ '--slider-color': frequencyBands.mid.color }}
                />
                <div className={styles.rangeLabels}>
                  <span>{frequencyBands.mid.min} –ì—Ü</span>
                  <span>{frequencyBands.mid.max} –ì—Ü</span>
                </div>
              </div>

              {/* –í—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã */}
              <div className={`${styles.frequencyBand} ${activeBand === 'high' ? styles.active : ''}`}>
                <div className={styles.bandHeader}>
                  <span className={styles.bandLabel} style={{ color: frequencyBands.high.color }}>
                    {frequencyBands.high.label}
                  </span>
                  <span className={styles.bandFreq}>
                    {formatFrequency(highFreq)}
                  </span>
                </div>
                <input
                  type="range"
                  min={frequencyBands.high.min}
                  max={frequencyBands.high.max}
                  value={highFreq}
                  onChange={(e) => handleBandFrequencyChange('high', e)}
                  className={`${styles.frequencySlider} ${styles.highSlider}`}
                  style={{ '--slider-color': frequencyBands.high.color }}
                />
                <div className={styles.rangeLabels}>
                  <span>{frequencyBands.high.min} –ì—Ü</span>
                  <span>{formatFrequency(frequencyBands.high.max)}</span>
                </div>
              </div>
            </div>

            {/* –¢–æ—á–Ω—ã–π –≤–≤–æ–¥ —á–∞—Å—Ç–æ—Ç—ã */}
            <div className={styles.frequencyInput}>
              <button
                onClick={() => setShowCustomInput(!showCustomInput)}
                className={styles.customFreqButton}
                title="–¢–æ—á–Ω—ã–π –≤–≤–æ–¥ —á–∞—Å—Ç–æ—Ç—ã"
              >
                <Settings size={16} />
              </button>
            </div>

            {/* –ü–æ–ª–µ —Ç–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ */}
            {showCustomInput && (
              <motion.form
                className={styles.customFreqForm}
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                onSubmit={handleCustomFrequencySubmit}
              >
                <input
                  type="number"
                  step="0.01"
                  min="1"
                  max="21000"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —á–∞—Å—Ç–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 17.5)"
                  value={tempCustomFreq}
                  onChange={(e) => setTempCustomFreq(e.target.value)}
                  className={styles.customFreqInput}
                />
                <button type="submit" className={styles.customFreqSubmit}>
                  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                </button>
              </motion.form>
            )}
          </div>

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–º–ø–ª–∏—Ç—É–¥–æ–π */}
          <div className={styles.controlGroup}>
            <label className={styles.controlLabel}>
              –ì—Ä–æ–º–∫–æ—Å—Ç—å: {Math.round(amplitude * 100)}%
            </label>
            <input
              type="range"
              min="0"
              max="1"
              step="0.01"
              value={amplitude}
              onChange={handleAmplitudeChange}
              className={styles.amplitudeSlider}
            />
            <div className={styles.rangeLabels}>
              <span>0%</span>
              <span>100%</span>
            </div>
          </div>

          {/* –í—ã–±–æ—Ä —Ñ–æ—Ä–º—ã –≤–æ–ª–Ω—ã */}
          <div className={styles.controlGroup}>
            <label className={styles.controlLabel}>–§–æ—Ä–º–∞ –≤–æ–ª–Ω—ã</label>
            <div className={styles.waveformButtons}>
              {waveforms.map((wave) => (
                <button
                  key={wave.value}
                  onClick={() => changeWaveform(wave.value)}
                  className={`${styles.waveformButton} ${
                    waveform === wave.value ? styles.active : ''
                  }`}
                  title={wave.description}
                >
                  {wave.value === 'sine' && <Volume2 size={20} />}
                  {wave.value === 'square' && <Square size={20} />}
                  {wave.value === 'sawtooth' && <Zap size={20} />}
                  {wave.value === 'triangle' && <Triangle size={20} />}
                  <span>{wave.label}</span>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* –ë–∞—Å–æ–≤—ã–µ –ø—Ä–µ—Å–µ—Ç—ã */}
        <div className={styles.bassPresets}>
          <div className={styles.presetsHeader}>
            <h3>–ß–∞—Å—Ç–æ—Ç–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã</h3>
            {isLooping && (
              <button
                onClick={handleStopLooping}
                className={styles.stopLoopButton}
                title="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ"
              >
                <RotateCcw size={16} />
                –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ({maxCycles - cycleCount} –æ—Å—Ç–∞–ª–æ—Å—å)
              </button>
            )}
          </div>
          
          {/* –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
          <div className={styles.presetCategories}>
            {/* –£–ª—å—Ç—Ä–∞ –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã */}
            <div className={styles.presetCategory}>
              <button 
                className={styles.categoryHeader}
                onClick={() => toggleCategory('ultra-low')}
              >
                <h4 className={styles.categoryTitle}>–£–ª—å—Ç—Ä–∞ –Ω–∏–∑–∫–∏–µ (1-20 –ì—Ü)</h4>
                <span className={`${styles.accordionIcon} ${openCategories['ultra-low'] ? styles.open : ''}`}>
                  ‚ñº
                </span>
              </button>
              {openCategories['ultra-low'] && (
                <motion.div 
                  className={styles.categoryContent}
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className={styles.presetGrid}>
                    {bassPresets
                      .filter(preset => preset.category === 'ultra-low')
                      .map((preset) => (
                        <div key={preset.frequency} className={styles.presetContainer}>
                          <button
                            onClick={() => handleBassPreset(preset)}
                            className={`${styles.presetButton} ${
                              currentPreset?.frequency === preset.frequency && !isLooping ? styles.active : ''
                            }`}
                            title={preset.description}
                          >
                            <div className={styles.presetName}>{preset.name}</div>
                            <div className={styles.presetFreq}>{preset.frequency} –ì—Ü</div>
                          </button>
                          <button
                            onClick={() => handleBassLoop(preset)}
                            className={`${styles.loopButton} ${
                              currentPreset?.frequency === preset.frequency && isLooping ? styles.active : ''
                            }`}
                            title={`–ó–∞—Ü–∏–∫–ª–∏—Ç—å ${preset.name}`}
                          >
                            üîÑ
                          </button>
                        </div>
                      ))}
                  </div>
                </motion.div>
              )}
            </div>

            {/* –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã */}
            <div className={styles.presetCategory}>
              <button 
                className={styles.categoryHeader}
                onClick={() => toggleCategory('very-low')}
              >
                <h4 className={styles.categoryTitle}>–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ (25-40 –ì—Ü)</h4>
                <span className={`${styles.accordionIcon} ${openCategories['very-low'] ? styles.open : ''}`}>
                  ‚ñº
                </span>
              </button>
              {openCategories['very-low'] && (
                <motion.div 
                  className={styles.categoryContent}
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className={styles.presetGrid}>
                    {bassPresets
                      .filter(preset => preset.category === 'very-low')
                      .map((preset) => (
                        <div key={preset.frequency} className={styles.presetContainer}>
                          <button
                            onClick={() => handleBassPreset(preset)}
                            className={`${styles.presetButton} ${
                              currentPreset?.frequency === preset.frequency && !isLooping ? styles.active : ''
                            }`}
                            title={preset.description}
                          >
                            <div className={styles.presetName}>{preset.name}</div>
                            <div className={styles.presetFreq}>{preset.frequency} –ì—Ü</div>
                          </button>
                          <button
                            onClick={() => handleBassLoop(preset)}
                            className={`${styles.loopButton} ${
                              currentPreset?.frequency === preset.frequency && isLooping ? styles.active : ''
                            }`}
                            title={`–ó–∞—Ü–∏–∫–ª–∏—Ç—å ${preset.name}`}
                          >
                            üîÑ
                          </button>
                        </div>
                      ))}
                  </div>
                </motion.div>
              )}
            </div>

            {/* –ù–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã */}
            <div className={styles.presetCategory}>
              <button 
                className={styles.categoryHeader}
                onClick={() => toggleCategory('low')}
              >
                <h4 className={styles.categoryTitle}>–ù–∏–∑–∫–∏–µ (45-80 –ì—Ü)</h4>
                <span className={`${styles.accordionIcon} ${openCategories['low'] ? styles.open : ''}`}>
                  ‚ñº
                </span>
              </button>
              {openCategories['low'] && (
                <motion.div 
                  className={styles.categoryContent}
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className={styles.presetGrid}>
                    {bassPresets
                      .filter(preset => preset.category === 'low')
                      .map((preset) => (
                        <div key={preset.frequency} className={styles.presetContainer}>
                          <button
                            onClick={() => handleBassPreset(preset)}
                            className={`${styles.presetButton} ${
                              currentPreset?.frequency === preset.frequency && !isLooping ? styles.active : ''
                            }`}
                            title={preset.description}
                          >
                            <div className={styles.presetName}>{preset.name}</div>
                            <div className={styles.presetFreq}>{preset.frequency} –ì—Ü</div>
                          </button>
                          <button
                            onClick={() => handleBassLoop(preset)}
                            className={`${styles.loopButton} ${
                              currentPreset?.frequency === preset.frequency && isLooping ? styles.active : ''
                            }`}
                            title={`–ó–∞—Ü–∏–∫–ª–∏—Ç—å ${preset.name}`}
                          >
                            üîÑ
                          </button>
                        </div>
                      ))}
                  </div>
                </motion.div>
              )}
            </div>

            {/* –°—Ä–µ–¥–Ω–∏–µ –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã */}
            <div className={styles.presetCategory}>
              <button 
                className={styles.categoryHeader}
                onClick={() => toggleCategory('mid-low')}
              >
                <h4 className={styles.categoryTitle}>–°—Ä–µ–¥–Ω–∏–µ –Ω–∏–∑–∫–∏–µ (100-200 –ì—Ü)</h4>
                <span className={`${styles.accordionIcon} ${openCategories['mid-low'] ? styles.open : ''}`}>
                  ‚ñº
                </span>
              </button>
              {openCategories['mid-low'] && (
                <motion.div 
                  className={styles.categoryContent}
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className={styles.presetGrid}>
                    {bassPresets
                      .filter(preset => preset.category === 'mid-low')
                      .map((preset) => (
                        <div key={preset.frequency} className={styles.presetContainer}>
                          <button
                            onClick={() => handleBassPreset(preset)}
                            className={`${styles.presetButton} ${
                              currentPreset?.frequency === preset.frequency && !isLooping ? styles.active : ''
                            }`}
                            title={preset.description}
                          >
                            <div className={styles.presetName}>{preset.name}</div>
                            <div className={styles.presetFreq}>{preset.frequency} –ì—Ü</div>
                          </button>
                          <button
                            onClick={() => handleBassLoop(preset)}
                            className={`${styles.loopButton} ${
                              currentPreset?.frequency === preset.frequency && isLooping ? styles.active : ''
                            }`}
                            title={`–ó–∞—Ü–∏–∫–ª–∏—Ç—å ${preset.name}`}
                          >
                            üîÑ
                          </button>
                        </div>
                      ))}
                  </div>
                </motion.div>
              )}
            </div>

            {/* –°—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã */}
            <div className={styles.presetCategory}>
              <button 
                className={styles.categoryHeader}
                onClick={() => toggleCategory('mid')}
              >
                <h4 className={styles.categoryTitle}>–°—Ä–µ–¥–Ω–∏–µ (250-500 –ì—Ü)</h4>
                <span className={`${styles.accordionIcon} ${openCategories['mid'] ? styles.open : ''}`}>
                  ‚ñº
                </span>
              </button>
              {openCategories['mid'] && (
                <motion.div 
                  className={styles.categoryContent}
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className={styles.presetGrid}>
                    {bassPresets
                      .filter(preset => preset.category === 'mid')
                      .map((preset) => (
                        <div key={preset.frequency} className={styles.presetContainer}>
                          <button
                            onClick={() => handleBassPreset(preset)}
                            className={`${styles.presetButton} ${
                              currentPreset?.frequency === preset.frequency && !isLooping ? styles.active : ''
                            }`}
                            title={preset.description}
                          >
                            <div className={styles.presetName}>{preset.name}</div>
                            <div className={styles.presetFreq}>{preset.frequency} –ì—Ü</div>
                          </button>
                          <button
                            onClick={() => handleBassLoop(preset)}
                            className={`${styles.loopButton} ${
                              currentPreset?.frequency === preset.frequency && isLooping ? styles.active : ''
                            }`}
                            title={`–ó–∞—Ü–∏–∫–ª–∏—Ç—å ${preset.name}`}
                          >
                            üîÑ
                          </button>
                        </div>
                      ))}
                  </div>
                </motion.div>
              )}
            </div>

            {/* –í—ã—Å–æ–∫–∏–µ —Å—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã */}
            <div className={styles.presetCategory}>
              <button 
                className={styles.categoryHeader}
                onClick={() => toggleCategory('mid-high')}
              >
                <h4 className={styles.categoryTitle}>–í—ã—Å–æ–∫–∏–µ —Å—Ä–µ–¥–Ω–∏–µ (630-2000 –ì—Ü)</h4>
                <span className={`${styles.accordionIcon} ${openCategories['mid-high'] ? styles.open : ''}`}>
                  ‚ñº
                </span>
              </button>
              {openCategories['mid-high'] && (
                <motion.div 
                  className={styles.categoryContent}
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className={styles.presetGrid}>
                    {bassPresets
                      .filter(preset => preset.category === 'mid-high')
                      .map((preset) => (
                        <div key={preset.frequency} className={styles.presetContainer}>
                          <button
                            onClick={() => handleBassPreset(preset)}
                            className={`${styles.presetButton} ${
                              currentPreset?.frequency === preset.frequency && !isLooping ? styles.active : ''
                            }`}
                            title={preset.description}
                          >
                            <div className={styles.presetName}>{preset.name}</div>
                            <div className={styles.presetFreq}>{preset.frequency} –ì—Ü</div>
                          </button>
                          <button
                            onClick={() => handleBassLoop(preset)}
                            className={`${styles.loopButton} ${
                              currentPreset?.frequency === preset.frequency && isLooping ? styles.active : ''
                            }`}
                            title={`–ó–∞—Ü–∏–∫–ª–∏—Ç—å ${preset.name}`}
                          >
                            üîÑ
                          </button>
                        </div>
                      ))}
                  </div>
                </motion.div>
              )}
            </div>

            {/* –í—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã */}
            <div className={styles.presetCategory}>
              <button 
                className={styles.categoryHeader}
                onClick={() => toggleCategory('high')}
              >
                <h4 className={styles.categoryTitle}>–í—ã—Å–æ–∫–∏–µ (2500-8000 –ì—Ü)</h4>
                <span className={`${styles.accordionIcon} ${openCategories['high'] ? styles.open : ''}`}>
                  ‚ñº
                </span>
              </button>
              {openCategories['high'] && (
                <motion.div 
                  className={styles.categoryContent}
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className={styles.presetGrid}>
                    {bassPresets
                      .filter(preset => preset.category === 'high')
                      .map((preset) => (
                        <div key={preset.frequency} className={styles.presetContainer}>
                          <button
                            onClick={() => handleBassPreset(preset)}
                            className={`${styles.presetButton} ${
                              currentPreset?.frequency === preset.frequency && !isLooping ? styles.active : ''
                            }`}
                            title={preset.description}
                          >
                            <div className={styles.presetName}>{preset.name}</div>
                            <div className={styles.presetFreq}>{preset.frequency} –ì—Ü</div>
                          </button>
                          <button
                            onClick={() => handleBassLoop(preset)}
                            className={`${styles.loopButton} ${
                              currentPreset?.frequency === preset.frequency && isLooping ? styles.active : ''
                            }`}
                            title={`–ó–∞—Ü–∏–∫–ª–∏—Ç—å ${preset.name}`}
                          >
                            üîÑ
                          </button>
                        </div>
                      ))}
                  </div>
                </motion.div>
              )}
            </div>

            {/* –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã */}
            <div className={styles.presetCategory}>
              <button 
                className={styles.categoryHeader}
                onClick={() => toggleCategory('very-high')}
              >
                <h4 className={styles.categoryTitle}>–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ (10-21 –∫–ì—Ü)</h4>
                <span className={`${styles.accordionIcon} ${openCategories['very-high'] ? styles.open : ''}`}>
                  ‚ñº
                </span>
              </button>
              {openCategories['very-high'] && (
                <motion.div 
                  className={styles.categoryContent}
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className={styles.presetGrid}>
                    {bassPresets
                      .filter(preset => preset.category === 'very-high')
                      .map((preset) => (
                        <div key={preset.frequency} className={styles.presetContainer}>
                          <button
                            onClick={() => handleBassPreset(preset)}
                            className={`${styles.presetButton} ${
                              currentPreset?.frequency === preset.frequency && !isLooping ? styles.active : ''
                            }`}
                            title={preset.description}
                          >
                            <div className={styles.presetName}>{preset.name}</div>
                            <div className={styles.presetFreq}>{formatFrequency(preset.frequency)}</div>
                          </button>
                          <button
                            onClick={() => handleBassLoop(preset)}
                            className={`${styles.loopButton} ${
                              currentPreset?.frequency === preset.frequency && isLooping ? styles.active : ''
                            }`}
                            title={`–ó–∞—Ü–∏–∫–ª–∏—Ç—å ${preset.name}`}
                          >
                            üîÑ
                          </button>
                        </div>
                      ))}
                  </div>
                </motion.div>
              )}
            </div>

            {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–µ—Å–µ—Ç */}
            <div className={styles.presetCategory}>
              <button 
                className={styles.categoryHeader}
                onClick={() => toggleCategory('custom')}
              >
                <h4 className={styles.categoryTitle}>–ö–∞—Å—Ç–æ–º–Ω—ã–µ</h4>
                <span className={`${styles.accordionIcon} ${openCategories['custom'] ? styles.open : ''}`}>
                  ‚ñº
                </span>
              </button>
              {openCategories['custom'] && (
                <motion.div 
                  className={styles.categoryContent}
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className={styles.presetGrid}>
                    {bassPresets
                      .filter(preset => preset.category === 'custom')
                      .map((preset) => (
                        <div key="custom" className={styles.presetContainer}>
                          <button
                            onClick={() => handleBassPreset(preset)}
                            className={`${styles.presetButton} ${styles.customPreset}`}
                            title={preset.description}
                          >
                            <div className={styles.presetName}>{preset.name}</div>
                            <div className={styles.presetFreq}>–í–≤–µ—Å—Ç–∏ —á–∞—Å—Ç–æ—Ç—É</div>
                          </button>
                        </div>
                      ))}
                  </div>
                </motion.div>
              )}
            </div>
          </div>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –±–∞—Å–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç—ã */}
        {showCustomBassInput && (
          <motion.div
            className={styles.modalOverlay}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            onClick={() => setShowCustomBassInput(false)}
          >
            <motion.div
              className={styles.modal}
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              onClick={(e) => e.stopPropagation()}
            >
              <h3>–ö–∞—Å—Ç–æ–º–Ω–∞—è –±–∞—Å–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞</h3>
              <form onSubmit={handleCustomBassSubmit}>
                <input
                  type="number"
                  step="0.01"
                  min="1"
                  max="21000"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 17.5)"
                  value={customBassFreq}
                  onChange={(e) => setCustomBassFreq(e.target.value)}
                  className={styles.modalInput}
                  autoFocus
                />
                <div className={styles.modalButtons}>
                  <button type="submit" className={styles.modalSubmit}>
                    –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowCustomBassInput(false)}
                    className={styles.modalCancel}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </form>
            </motion.div>
          </motion.div>
        )}

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ */}
        {error && (
          <motion.div
            className={styles.error}
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
          >
            <p>{error}</p>
          </motion.div>
        )}
      </motion.section>
    </div>
  );
};

export default ToneGenerator; 