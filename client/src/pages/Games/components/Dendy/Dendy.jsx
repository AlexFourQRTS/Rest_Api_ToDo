import React, { useState, useEffect, useRef } from 'react';
import { toast } from 'react-toastify';
import { loadRomFile } from '../../utils/romApi';
import styles from './Dendy.module.css';
import { getAllRoms, searchRoms, filterRomsByCategory } from '../../utils/romApi';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º nes-js
import 'nes-js';

const Dendy = () => {
  const [nes, setNes] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [currentGame, setCurrentGame] = useState('');
  const [showGameList, setShowGameList] = useState(false);
  const [availableRoms, setAvailableRoms] = useState([]);
  const [filteredRoms, setFilteredRoms] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [showControls, setShowControls] = useState(false);
  const [showStats, setShowStats] = useState(false);
  const [fps, setFps] = useState(0);
  const [frameCount, setFrameCount] = useState(0);
  const [lastTime, setLastTime] = useState(0);
  const canvasRef = useRef(null);
  const audioContextRef = useRef(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞
  useEffect(() => {
    const initEmulator = () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ NesJs –¥–æ—Å—Ç—É–ø–µ–Ω
      if (typeof window.NesJs === 'undefined') {
        console.error('NesJs –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return;
      }

      const nesInstance = new window.NesJs.Nes();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Å–ø–ª–µ–π
      nesInstance.setDisplay(new window.NesJs.Display(canvasRef.current));
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
      nesInstance.setAudio(new window.NesJs.Audio());
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
      window.onkeydown = (e) => nesInstance.handleKeyDown(e);
      window.onkeyup = (e) => nesInstance.handleKeyUp(e);
      
      setNes(nesInstance);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      if (!audioContextRef.current) {
        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
      }
    };

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ NesJs
    const checkNesJs = () => {
      if (typeof window.NesJs !== 'undefined') {
        initEmulator();
      } else {
        setTimeout(checkNesJs, 100);
      }
    };
    
    checkNesJs();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ROM'–æ–≤
    const loadRoms = async () => {
      try {
        const roms = await getAllRoms();
        setAvailableRoms(roms);
        setFilteredRoms(roms);
        toast.success(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${roms.length} –∏–≥—Ä!`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ ROM\'–æ–≤:', error);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä');
      }
    };

    loadRoms();
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä
  useEffect(() => {
    let filtered = availableRoms;

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (searchQuery) {
      filtered = searchRoms(searchQuery, filtered);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (selectedCategory !== 'all') {
      filtered = filterRomsByCategory(selectedCategory, filtered);
    }

    setFilteredRoms(filtered);
  }, [searchQuery, selectedCategory, availableRoms]);

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–¥—Ä–æ–≤ —ç–º—É–ª—è—Ç–æ—Ä–∞
  useEffect(() => {
    if (!nes || !isPlaying || !currentGame) return;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ jsnes
    const renderFrame = () => {
      if (isPlaying && currentGame) {
        // –ê–Ω–∏–º–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤ loadGame
        requestAnimationFrame(renderFrame);
      }
    };

    renderFrame();
  }, [nes, isPlaying, currentGame]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã
  const stopGame = () => {
    setIsPlaying(false);
    setCurrentGame('');
    if (nes) {
      nes.stop();
    }
    toast.info('–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  };

  const categories = [
    { id: 'all', name: '–í—Å–µ –∏–≥—Ä—ã' },
    { id: 'action', name: '–≠–∫—à–µ–Ω' },
    { id: 'puzzle', name: '–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏' },
    { id: 'sports', name: '–°–ø–æ—Ä—Ç' },
    { id: 'rpg', name: 'RPG' },
    { id: 'platform', name: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä—ã' },
    { id: 'strategy', name: '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏' },
    { id: 'other', name: '–î—Ä—É–≥–∏–µ' }
  ];

  const loadRom = async (romData, gameName = 'Unknown ROM') => {
    if (!nes) return;

    try {
      setIsLoading(true);

      // –°–æ–∑–¥–∞–µ–º ROM –æ–±—ä–µ–∫—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ —ç–º—É–ª—è—Ç–æ—Ä
      const rom = new window.NesJs.Rom(romData);
      nes.setRom(rom);
      
      setIsPlaying(true);
      setCurrentGame(gameName);
      toast.success('ROM –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ü–∏—é
      nes.bootup();
      nes.run();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ROM:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ROM');
    } finally {
      setIsLoading(false);
    }
  };

  const handleGameSelect = async (rom) => {
    try {
      setIsLoading(true);
      const romData = await loadRomFile(rom.fileName);
      await loadRom(romData, rom.name);
      setShowGameList(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={styles.dendyContainer}>
      <div className={styles.header}>
        <h2>üéÆ Dendy (NES) –≠–º—É–ª—è—Ç–æ—Ä</h2>
        <p>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∏–≥—Ä—ã Nintendo Entertainment System</p>
      </div>

      <div className={styles.controls}>
        <div className={styles.searchSection}>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –∏–≥—Ä..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className={styles.searchInput}
          />
          
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className={styles.categorySelect}
          >
            {categories.map(cat => (
              <option key={cat.id} value={cat.id}>{cat.name}</option>
            ))}
          </select>
        </div>

        <div className={styles.gameControls}>
          <button 
            onClick={() => setShowGameList(!showGameList)}
            className={styles.controlButton}
            disabled={isLoading}
          >
            {showGameList ? '–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫' : '–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É'}
          </button>
          
          {isPlaying && (
            <button 
              onClick={stopGame}
              className={styles.controlButton}
            >
              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            </button>
          )}
        </div>
      </div>

      {showGameList && (
        <div className={styles.gameList}>
          <div className={styles.gameListHeader}>
            <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã ({filteredRoms.length})</h3>
            <p>–ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä: {filteredRoms.length} –∏–∑ {availableRoms.length}</p>
          </div>
          
          <div className={styles.gamesGrid}>
            {filteredRoms.slice(0, 100).map((rom) => (
              <div
                key={rom.id}
                className={styles.gameItem}
                onClick={() => handleGameSelect(rom)}
              >
                <div className={styles.gameIcon}>üéÆ</div>
                <div className={styles.gameInfo}>
                  <h4>{rom.name}</h4>
                  <span className={styles.gameCategory}>
                    {categories.find(cat => cat.id === rom.category)?.name || '–î—Ä—É–≥–æ–µ'}
                  </span>
                </div>
              </div>
            ))}
          </div>
          
          {filteredRoms.length > 100 && (
            <div className={styles.loadMore}>
              <p>–ü–æ–∫–∞–∑–∞–Ω–æ 100 –∏–∑ {filteredRoms.length} –∏–≥—Ä</p>
              <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã</p>
            </div>
          )}
        </div>
      )}

      <div className={styles.emulatorSection}>
        <div className={styles.canvasContainer}>
          <canvas
            ref={canvasRef}
            width={256}
            height={240}
            className={styles.gameCanvas}
          />
          
          {!currentGame && !isLoading && (
            <div className={styles.placeholder}>
              <div className={styles.placeholderContent}>
                <h3>üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É</h3>
                <p>–ù–∞–∂–º–∏—Ç–µ "–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å</p>
                <div className={styles.controlsInfo}>
                  <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</h4>
                  <ul>
                    <li>–°—Ç—Ä–µ–ª–∫–∏ - –î–≤–∏–∂–µ–Ω–∏–µ</li>
                    <li>Z - –ö–Ω–æ–ø–∫–∞ A</li>
                    <li>X - –ö–Ω–æ–ø–∫–∞ B</li>
                    <li>Enter - Start</li>
                    <li>Shift - Select</li>
                  </ul>
                </div>
              </div>
            </div>
          )}
          
          {isLoading && (
            <div className={styles.loading}>
              <div className={styles.spinner}></div>
              <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</p>
            </div>
          )}
        </div>

        {currentGame && (
          <div className={styles.gameInfo}>
            <h3>üéÆ {currentGame}</h3>
            <p>–°—Ç–∞—Ç—É—Å: {isPlaying ? '–ò–≥—Ä–∞–µ—Ç—Å—è' : '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Dendy; 